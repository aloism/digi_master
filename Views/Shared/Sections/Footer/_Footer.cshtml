@{
  TempData.Keep();
  ViewData["containerNav"] = (ViewData["containerNav"] ??= "container-fluid");
}

<footer class="content-footer footer bg-footer-theme">
  <div class="@ViewData["containerNav"]">
    <div class="footer-container d-flex align-items-center justify-content-between py-4 flex-md-row flex-column">
      <div class="text-body">
        v2.5 ¬© <script>
        document.write(new Date().getFullYear())
        </script>, made with ‚ù§Ô∏è by <a href='@TempData.Peek("authorUrl")' target="_blank" class="footer-link fw-medium">@TempData.Peek("authorName")</a>
      </div>
      @* <div class="d-none d-lg-inline-block">
        <a href='@TempData.Peek("licenseUrl")' class="footer-link me-4" target="_blank">License</a>
        <a href='@TempData.Peek("authorUrl")' target="_blank" class="footer-link me-4">More Themes</a>
        <a href='@TempData.Peek("documentation")' target="_blank" class="footer-link me-4">Documentation</a>
        <a href='@TempData.Peek("support")' target="_blank" class="footer-link d-none d-sm-inline-block">Support</a>
      </div> *@
    </div>
  </div>
    <script>
          window.onload = function() {
            // üñºÔ∏è Code here will execute after the entire page (HTML, images, CSS) is fully loaded.
            var alertTitle = "Notification";
        var titleDiv = document.getElementById('toast-title');
        var messageDiv = document.getElementById('toast-message');
               const alertInfoMessage = "@ViewData["InfoMessage"]";//"@TempData["InfoMessage"]";
               const alertSuccessMessage = "@ViewData["SuccessMessage"]";//"@TempData["SuccessMessage"]";
               const alertErrorMessage = "@ViewData["ErrorMessage"]";//"@TempData["ErrorMessage"]";
               const alertAdvancedMessage = "@ViewData["alertAdvancedMessage"]";//"@TempData["alertAdvancedMessage"]";
        // alert(alertMessage);
            var selectedType = "bg-primary";
            var alertMessage = "";
        if (alertInfoMessage) {
            selectedType = "bg-primary";//document.querySelector('#selectType').value;
            alertMessage = alertInfoMessage;
        }
        if (alertSuccessMessage) {
            selectedType = "bg-success";
            alertMessage = alertSuccessMessage;
        }
        if (alertErrorMessage) {
            selectedType = "bg-danger";
            alertMessage = alertErrorMessage;
        }

        const toastAnimationExample = document.querySelector('.toast-ex'),
          toastPlacementExample = document.querySelector('.toast-placement-ex'),
          toastAnimationBtn = document.querySelector('#showToastAnimation'),
          toastPlacementBtn = document.querySelector('#showToastPlacement');
        let selectedAnimation, selectedPlacement, toast, toastAnimation, toastPlacement;

        // Animation Button click
        if (alertMessage) {
         // toastAnimationBtn.onclick = function () {
            if (toastAnimation) {
              toastDispose(toastAnimation);
            }
            //selectedType = "bg-primary";//document.querySelector('#selectType').value;
            selectedAnimation = "animate__tada";//document.querySelector('#selectAnimation').value;
            document.getElementById("toast-title").innerHTML = alertTitle;
            document.getElementById("toast-message").innerHTML = alertMessage;
            toastAnimationExample.classList.add(selectedType, selectedAnimation);
            toastAnimation = new bootstrap.Toast(toastAnimationExample);
            toastAnimation.show();
         // };
        }

        // Dispose toast when open another
        function toastDispose(toast) {
          if (toast && toast._element !== null) {
            if (toastPlacementExample) {
              toastPlacementExample.classList.remove(selectedType);
              DOMTokenList.prototype.remove.apply(toastPlacementExample.classList, selectedPlacement);
            }
            if (toastAnimationExample) {
              toastAnimationExample.classList.remove(selectedType, selectedAnimation);
            }
            toast.dispose();
          }
        }
        if(alertAdvancedMessage){
              var shortCutFunction = "success",//$('#toastTypeGroup input:radio:checked').val(),
          isRtl = true,//$('html').attr('dir') === 'rtl',
          msg = alertMessage,
          title = alertTitle || '',
          $showDuration = $('#showDuration'),
          $hideDuration = $('#hideDuration'),
          $timeOut = $('#timeOut'),
          $extendedTimeOut = $('#extendedTimeOut'),
          $showEasing = $('#showEasing'),
          $hideEasing = $('#hideEasing'),
          $showMethod = $('#showMethod'),
          $hideMethod = $('#hideMethod'),
          toastIndex = toastCount++,
          addClear = $('#addClear').prop('checked'),
          prePositionClass = 'toast-top-right';

        prePositionClass =
          typeof toastr.options.positionClass === 'undefined' ? 'toast-top-right' : toastr.options.positionClass;

        toastr.options = {
          maxOpened: 1,
          autoDismiss: true,
          closeButton: $('#closeButton').prop('checked'),
          debug: $('#debugInfo').prop('checked'),
          newestOnTop: $('#newestOnTop').prop('checked'),
          progressBar: $('#progressBar').prop('checked'),
          positionClass: $('#positionGroup input:radio:checked').val() || 'toast-top-right',
          preventDuplicates: $('#preventDuplicates').prop('checked'),
          onclick: null,
          rtl: isRtl
        };

        //Add fix for multiple toast open while changing the position
        if (prePositionClass != toastr.options.positionClass) {
          toastr.options.hideDuration = 0;
          toastr.clear();
        }

        if ($('#addBehaviorOnToastClick').prop('checked')) {
          toastr.options.onclick = function () {
            alert('You can perform some custom action after a toast goes away');
          };
        }
        if ($('#addBehaviorOnToastCloseClick').prop('checked')) {
          toastr.options.onCloseClick = function () {
            alert('You can perform some custom action when the close button is clicked');
          };
        }
        if ($showDuration.val().length) {
          toastr.options.showDuration = parseInt($showDuration.val());
        }
        if ($hideDuration.val().length) {
          toastr.options.hideDuration = parseInt($hideDuration.val());
        }
        if ($timeOut.val().length) {
          toastr.options.timeOut = addClear ? 0 : parseInt($timeOut.val());
        }
        if ($extendedTimeOut.val().length) {
          toastr.options.extendedTimeOut = addClear ? 0 : parseInt($extendedTimeOut.val());
        }
        if ($showEasing.val().length) {
          toastr.options.showEasing = $showEasing.val();
        }
        if ($hideEasing.val().length) {
          toastr.options.hideEasing = $hideEasing.val();
        }
        if ($showMethod.val().length) {
          toastr.options.showMethod = $showMethod.val();
        }
        if ($hideMethod.val().length) {
          toastr.options.hideMethod = $hideMethod.val();
        }
        if (addClear) {
          msg = getMessageWithClearButton(msg);
          toastr.options.tapToDismiss = false;
        }
        if (!msg) {
          msg = getMessage();
        }
        var $toast = toastr[shortCutFunction](msg, title); // Wire up an event handler to a button in the toast, if it exists
        $toastlast = $toast;
        if (typeof $toast === 'undefined') {
          return;
        }
        if ($toast.find('#okBtn').length) {
          $toast.delegate('#okBtn', 'click', function () {
            alert('you clicked me. i was toast #' + toastIndex + '. goodbye!');
            $toast.remove();
          });
        }
        if ($toast.find('#surpriseBtn').length) {
          $toast.delegate('#surpriseBtn', 'click', function () {
            alert('Surprise! you clicked me. i was toast #' + toastIndex + '. You could perform an action here.');
          });
        }
        if ($toast.find('.clear').length) {
          $toast.delegate('.clear', 'click', function () {
            toastr.clear($toast, {
              force: true
            });
          });
        }

            }
        };
        //       'use strict';

        // (function () {
        // })();
    

    </script>

</footer>
