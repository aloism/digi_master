@model IEnumerable<AspnetCoreMvcFull.Models.Transactions>
@using Newtonsoft.Json

@{
  ViewData["Title"] = "Index";
  ViewData["statusClass"] = "";
}

@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/datatables-bs5/datatables.bootstrap5.css">
  <link rel="stylesheet" href="~/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css">
  <link rel="stylesheet" href="~/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css">
  <link rel="stylesheet" href="~/vendor/libs/sweetalert2/sweetalert2.css" />
  <link rel="stylesheet" href="~/vendor/libs/&#64;form-validation/form-validation.css" />
}

@section VendorScripts {
  <script src="~/vendor/libs/moment/moment.js"></script>
  <script src="~/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>
  <script src="~/vendor/libs/sweetalert2/sweetalert2.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/popular.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/bootstrap5.js"></script>
  <script src="~/vendor/libs/&#64;form-validation/auto-focus.js"></script>
  <script src="~/vendor/libs/cleavejs/cleave.js"></script>
  <script src="~/vendor/libs/cleavejs/cleave-phone.js"></script>
}

@section PageScripts {
  <script src="~/js/transactions-delete.js"></script>
  <script src="~/js/transactions-list.js"></script>
}

<!-- TransactionsToasts-->

@if (TempData.ContainsKey("TransactionsToast") && TempData.ContainsKey("DisplayToast") && (bool?)TempData["DisplayToast"] == true)
{
    var transactionsToastJson = TempData["TransactionsToast"] as string;
    if (!string.IsNullOrEmpty(transactionsToastJson))
    {
    var transactionsToast = JsonConvert.DeserializeObject<List<TransactionsToast>>(transactionsToastJson);

        // Check if transactionsToast is not null before proceeding
    if (transactionsToast?.Count > 0)
    {
    // Display the toast
    <div class="toast-container end-0 m-1 me-4">
        @foreach (var toast in transactionsToast)
        {
            <div class="toast @toast.CssClass" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="2000">
                <div class="toast-body text-center text-white">
                    @toast.Message
                </div>
            </div>
        }
    </div>
     }
     }

    // Remove TempData flag to prevent displaying the toast on subsequent page reloads
    TempData.Remove("DisplayToast");

}

<!-- /TransactionsToasts -->

<div class="row g-6 mb-6">
  <div class="col-sm-6 col-xl-3">
    <div class="card">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <div class="d-flex align-items-center my-1">
              <h4 class="mb-0 me-2">@ViewData["TotalTransactions"]</h4>
              <p class="text-primary mb-0"></p>
            </div>
            <small class="mb-0">Total Transactions</small>
          </div>
          <div class="avatar">
            <span class="avatar-initial rounded bg-label-primary">
              <i class="bx bx-transfer-alt bx-lg"></i>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-sm-6 col-xl-3">
    <div class="card">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <div class="d-flex align-items-center my-1">
              <h4 class="mb-0 me-2">$@ViewData["TotalPaidTransactions"]</h4>
              <p class="text-success mb-0"></p>
            </div>
            <small class="mb-0">Total Paid</small>
          </div>
          <div class="avatar">
            <span class="avatar-initial rounded bg-label-success">
              <i class="bx bx-user-check bx-lg"></i>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-sm-6 col-xl-3">
    <div class="card">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <div class="d-flex align-items-center my-1">
              <h4 class="mb-0 me-2">$@ViewData["TotalDueTransactions"]</h4>
              <p class="text-danger mb-0"></p>
            </div>
            <small class="mb-0">Total Due</small>
          </div>
          <div class="avatar">
            <span class="avatar-initial rounded bg-label-danger">
              <i class="bx bx-group bx-lg"></i>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="col-sm-6 col-xl-3">
    <div class="card">
      <div class="card-body">
        <div class="d-flex align-items-start justify-content-between">
          <div class="content-left">
            <div class="d-flex align-items-center my-1">
              <h4 class="mb-0 me-2">$@ViewData["TotalCanceledTransactions"]</h4>
              <p class="text-success mb-0"></p>
            </div>
            <small class="mb-0">Total Canceled</small>
          </div>
          <div class="avatar">
            <span class="avatar-initial rounded bg-label-warning">
              <i class="bx bx-user-voice bx-lg"></i>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@* Transactions Table *@
<div class="card">
  <div class="card-datatable table-responsive pb-0">
    <table id="transactionsTable" class="table mb-6">
      <thead class="border-top">
        <tr class="text-nowrap">
          <th></th>
          <th>@Html.DisplayNameFor(model => model.Id)</th>
          <th>
            @Html.DisplayNameFor(model => model.Customer)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.TransactionDate)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.DueDate)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.Total)
          </th>
          <th>
            @Html.DisplayNameFor(model => model.Status)
          </th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        @if (Model?.Any() == true){
          @foreach (var item in Model) {
           string statusClass = "info"; // Default value if item.Status is null or doesn't match any case

            if (!string.IsNullOrWhiteSpace(item.Status)) {
              string lowerCaseStatus = item.Status.ToLower();

              if (lowerCaseStatus == "paid") {
                statusClass = "success";
              } else if (lowerCaseStatus == "due") {
                statusClass = "warning";
              } else if (lowerCaseStatus == "canceled") {
                statusClass = "danger";
              }
            }

            <tr>
              <td></td>
              <td>
                @Html.DisplayFor(modelItem => item.Id)
              </td>
              <td class="text-nowrap fw-medium text-heading">
                @Html.DisplayFor(modelItem => item.Customer)
              </td>
              <td>
                @item.TransactionDate.ToString("dd MMMM, yy")
              </td>
              <td>
                @item.DueDate.ToString("dd MMMM, yy")
              </td>
              <td>
                $@item.Total
              </td>
              <td>
                <div class="badge bg-label-@statusClass rounded-pill">
                  @Html.DisplayFor(modelItem => item.Status)
                </div>
              </td>
              <td class="text-nowrap">
                <a asp-action="Update" asp-route-id="@item.Id" class="btn btn-sm btn-icon shadow-none"><i class='bx bx-edit'></i></a>
                <a href="/Transactions/Delete/@item.Id" class="btn btn-sm btn-icon shadow-none delete-transaction" data-transaction-username="@Html.DisplayFor(modelItem => item.Customer)"><i class="bx bx-trash"></i></a>
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
  </div>
</div>
